format ELF64 executable 3
use64
segment executable
entry main
__built_in_print_float:
    sub     rsp, 520
    mov     r9, rdi
    xor     eax, eax
    mov     ecx, 64
    mov     rdi, rsp
    mov     rdx, r9
    mov     r10, rsp
    rep stosq
    not     rdx
    mov     rax, 9218868437227405312
    test    rdx, rax
    je      .L25
    movq    xmm0, r9
    test    r9, r9
    js      .L26
    movsd   xmm1, QWORD [rip]
    comisd  xmm0, xmm1
    jnb     .L7
.L28:
    cvttsd2si       rcx, xmm0
    test    rcx, rcx
    js      .L9
.L27:
    pxor    xmm2, xmm2
    cvtsi2sd        xmm2, rcx
.L10:
    subsd   xmm0, xmm2
    mulsd   xmm0, QWORD [rip]
    comisd  xmm0, xmm1
    jnb     .L11
    cvttsd2si       rdi, xmm0
.L12:
    mov     r8, -3689348814741910323
    mov     rax, rdi
    mov     BYTE [rsp+500], 46
    mul     r8
    shr     rdx, 3
    lea     rax, [rdx+rdx*4]
    mov     rsi, rdx
    add     rax, rax
    sub     rdi, rax
    mov     rax, rdx
    mul     r8
    add     edi, 48
    mov     BYTE [rsp+510], dil
    shr     rdx, 3
    lea     rax, [rdx+rdx*4]
    mov     rdi, rdx
    add     rax, rax
    sub     rsi, rax
    mov     rax, rdx
    mul     r8
    add     esi, 48
    mov     BYTE [rsp+509], sil
    mov     rsi, rdx
    shr     rsi, 3
    lea     rax, [rsi+rsi*4]
    add     rax, rax
    sub     rdi, rax
    mov     rax, rsi
    mul     r8
    add     edi, 48
    mov     BYTE [rsp+508], dil
    shr     rdx, 3
    lea     rax, [rdx+rdx*4]
    mov     rdi, rdx
    add     rax, rax
    sub     rsi, rax
    mov     rax, rdx
    mul     r8
    add     esi, 48
    mov     BYTE [rsp+507], sil
    mov     rsi, rdx
    shr     rsi, 3
    lea     rax, [rsi+rsi*4]
    add     rax, rax
    sub     rdi, rax
    mov     rax, rsi
    mul     r8
    add     edi, 48
    mov     BYTE [rsp+506], dil
    mov     rdi, rdx
    shr     rdi, 3
    lea     rax, [rdi+rdi*4]
    add     rax, rax
    sub     rsi, rax
    mov     rax, rdi
    mul     r8
    add     esi, 48
    mov     BYTE [rsp+505], sil
    mov     rsi, rdx
    shr     rsi, 3
    lea     rax, [rsi+rsi*4]
    add     rax, rax
    sub     rdi, rax
    mov     rax, rsi
    mul     r8
    add     edi, 48
    mov     BYTE [rsp+504], dil
    shr     rdx, 3
    lea     rax, [rdx+rdx*4]
    mov     rdi, rdx
    add     rax, rax
    sub     rsi, rax
    mov     rax, rdx
    mul     r8
    add     esi, 48
    mov     BYTE [rsp+503], sil
    mov     rsi, rdx
    shr     rsi, 3
    lea     rax, [rsi+rsi*4]
    add     rax, rax
    sub     rdi, rax
    mov     rax, rsi
    mul     r8
    add     edi, 48
    mov     BYTE [rsp+502], dil
    shr     rdx, 3
    lea     rax, [rdx+rdx*4]
    add     rax, rax
    sub     rsi, rax
    add     esi, 48
    mov     BYTE [rsp+501], sil
    test    rcx, rcx
    jne     .L18
    mov     BYTE [rsp+499], 48
    mov     esi, 499
.L14:
    test    r9, r9
    jns     .L15
    mov     BYTE [rsp-1+rsi], 45
    sub     rsi, 1
.L15:
    mov     edx, 511
    sub     rdx, rsi
.L23:
    add     rsi, r10
    mov     edi, 1
    mov     rax, 1
    mov     rdi, 1
    syscall
    add     rsp, 520
    ret
.L7:
    movapd  xmm2, xmm0
    subsd   xmm2, xmm1
    cvttsd2si       rcx, xmm2
    btc     rcx, 63
    test    rcx, rcx
    jns     .L27
.L9:
    mov     rax, rcx
    mov     rdx, rcx
    pxor    xmm2, xmm2
    shr     rax, 1
    and     edx, 1
    or      rax, rdx
    cvtsi2sd        xmm2, rax
    addsd   xmm2, xmm2
    jmp     .L10
.L26:
    xorpd   xmm0, [rip]
    movsd   xmm1, QWORD [rip]
    comisd  xmm0, xmm1
    jnb     .L7
    jmp     .L28
.L18:
    mov     esi, 500
.L13:
    mov     rax, rcx
    sub     rsi, 1
    mul     r8
    mov     rax, rcx
    shr     rdx, 3
    lea     rdi, [rdx+rdx*4]
    add     rdi, rdi
    sub     rax, rdi
    add     eax, 48
    mov     BYTE [r10+rsi], al
    mov     rax, rcx
    mov     rcx, rdx
    cmp     rax, 9
    ja      .L13
    jmp     .L14
.L11:
    subsd   xmm0, xmm1
    cvttsd2si       rdi, xmm0
    btc     rdi, 63
    jmp     .L12
.L25:
    mov     rax, 4503599627370495
    test    r9, rax
    je      .L29
    mov     edx, 24910
    mov     BYTE [rsp+510], 78
    mov     esi, 508
    mov     WORD [rsp+508], dx
    mov     edx, 3
    jmp     .L23
.L29:
    sar     r9, 63
    mov     eax, 28233
    mov     edx, 4
    mov     BYTE [rsp+510], 102
    and     r9d, 2
    mov     WORD [rsp+508], ax
    mov     esi, 507
    add     r9d, 43
    mov     BYTE [rsp+507], r9b
    jmp     .L23
__built_in_print_int:
    mov     rcx, rdi
    sub     rsp, 40
    mov     r11, rdi
    mov     r9, -3689348814741910323
    neg     rcx
    lea     r8, [rsp+19]
    cmovs   rcx, rdi
    mov     rdi, 20
.L3:
    mov     rax, rcx
    mov     r10d, edi
    sub     r8, 1
    mul     r9
    mov     rax, rcx
    sub     rdi, 1
    shr     rdx, 3
    lea     rsi, [rdx+rdx*4]
    add     rsi, rsi
    sub     rax, rsi
    add     eax, 48
    mov     BYTE [r8+1], al
    mov     rax, rcx
    mov     rcx, rdx
    cmp     rax, 9
    ja      .L3
    movsx   rax, di
    test    r11, r11
    jns     .L4
    lea     rdi, [r10-2]
    movsx   rax, di
    mov     BYTE [rsp+rax], 45
.L4:
    mov     edx, 20
    lea     rsi, [rsp+rax]
    sub     edx, edi
    mov     rdi, 1
    movsx   rdx, dx
    mov     rax, 1
    syscall
    add     rsp, 40
    ret
__built_in_print_uint:
    sub     rsp, 40
    mov     ecx, 19
    mov  r9, -3689348814741910323
.L2:
    mov     rax, rdi
    movsx   r8, cx
    mul     r9
    mov     rax, rdi
    shr     rdx, 3
    lea     rsi, [rdx+rdx*4]
    add     rsi, rsi
    sub     rax, rsi
    add     eax, 48
    mov     BYTE [rsp+rcx], al
    mov     rax, rdi
    sub     rcx, 1
    mov     rdi, rdx
    cmp     rax, 9
    ja      .L2
    mov     edx, 20
    lea     rsi, [rsp+r8]
    mov     rdi, 1
    sub     edx, r8d
    movsx   rdx, dx
    mov     rax, 1
    syscall
    add     rsp, 40
    ret
main:
    ;; Push int64_t constant
    mov rax, 123
    push rax
    ;; Push int64_t constant
    mov rax, 321
    push rax
    ;; Arithmetic operation: add
    pop rbx
    pop rax
    ;; add operation
    add rax, rbx
    push rax
    ;; Push int64_t constant
    mov rax, 4
    push rax
    ;; Push int64_t constant
    mov rax, 2
    push rax
    ;; Arithmetic operation: sub
    pop rbx
    pop rax
    ;; sub operation
    sub rax, rbx
    push rax
    ;; Arithmetic operation: idiv
    pop rbx
    pop rax
    ;; signed division
    idiv rbx
    push rax
    ;; Push int64_t constant
    mov rax, 5
    push rax
    ;; Push int64_t constant
    mov rax, 5
    push rax
    ;; Arithmetic operation: imul
    pop rbx
    pop rax
    ;; signed multiplication
    imul rax, rbx
    push rax
    ;; Arithmetic operation: imul
    pop rbx
    pop rax
    ;; signed multiplication
    imul rax, rbx
    push rax
    ;; -- Print Int
    pop rdi
    call __built_in_print_int
    ;; Return from main
    mov rax, 60  ; syscall for exit
    xor rdi, rdi ; exit status 0
    syscall
segment writable
